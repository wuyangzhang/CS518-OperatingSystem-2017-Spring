>
/* memlib.c
 * We emulate the memory system as an array of bytes.
 *
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <sys/mman.h>
#include <string.h>
#include <errno.h>

#include "memlib.h"


#define WSIZE       4       /* Word and header/footer size (bytes) */
#define DSIZE       8       /* Doubleword size (bytes) */

/* Pack a size and allocated bit into a word */
#define PACK(size, alloc)  ((size) | (alloc))

/* Read and write a word at address p */
#define GET(p)       (*(unsigned int *)(p))
#define PUT(p, val)  (*(unsigned int *)(p) = (val))

/* Read the size and allocated fields from address p */
#define GET_SIZE(p)  (GET(p) & ~0x7)
#define GET_ALLOC(p) (GET(p) & 0x1)

/* Given block ptr bp, compute address of its header and footer */
#define HDRP(bp)       ((char *)(bp) - WSIZE)
#define FTRP(bp)       ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)

/* Given block ptr bp, compute address of next and previous blocks */
#define NEXT_BLKP(bp)  ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))
#define PREV_BLKP(bp)  ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))

/* Marco definitions that transfer malloc & free functions to self designed functions */
//#define malloc(x)   myAllocate(x, __FILE__, __LINE__, THREADREQ)
//#define free(x)     myDeallocate(x, __FILE__, __LINE__, THREADREQ)

void* page_sbrk(memoryManager* page, int incr);
static void *extend_heap(memoryManager* page, size_t words);
static void place(void *bp, size_t asize);
static void *find_fit(memoryManager* page, size_t asize);
static void *coalesce(void *bp);
static void printblock(void *bp);

/*
 * mem_init
 * Initialize the space for all pages that
 * emulate a continuous 8 MB physical memory
 *
 *          Page Format
 * ---------------------------------------
 *          page_available
 *          threadId;
 *          mem_heap;     (point to the first byte of page)
 *          mem_brk;      (points to the last byte of page puls 1)
 *          mem_max_addr  (max page addr plus 1 )
 *
 *          padding
 *          prologue header
 *          prologue footer
 *          epilogue header
 * ----------------------------------------
 */
int
mem_init(void){
    
    char *emulated_memory = (char*) malloc(MAX_PAGE*PAGE_SIZE);
    char* next = emulated_memory;
    
    int i;
    /* init pages */
    for(i = 0; i < MAX_PAGE; i++){
        pages[i] = (memoryManager*)malloc(sizeof(memoryManager));
        pages[i]->page_available = '0';
        pages[i]->threadId = -1;
        pages[i]->mem_heap = next;
        pages[i]->mem_brk = pages[i]->mem_heap;
        pages[i]->mem_max_addr = pages[i]->mem_heap + PAGE_SIZE;
        pages[i]->heap_listp = 0;
        next += PAGE_SIZE;
    }
    
    return 0;
}

int
page_init_wrap(int pageNum, pid_t thread_id){
    pages[pageNum]->threadId = thread_id;
    pages[pageNum]->page_available = '1';
}

int
page_init(memoryManager* page){
    
    if((page->heap_listp = page_sbrk(page, 4*WSIZE)) == (void*) -1){
        return -1;
    }

    PUT(page->heap_listp, 0);
    
    /* Prologue header */
    PUT(page->heap_listp + (1*WSIZE), PACK(DSIZE, 1));
    /* Prologue footer */
    PUT(page->heap_listp + (2*WSIZE), PACK(DSIZE, 1));
    /* Epilogue header */
    PUT(page->heap_listp + (3*WSIZE), PACK(0, 1));
    /* update heap_listp, pointing to the first block */
    page->heap_listp += (2*WSIZE);
    
    /* Extend the empty heap with a free block of BLOCK bytes */
    if (extend_heap(page, BLOCK_SIZE/WSIZE) == NULL)
        return -1;
    
    return 0;
}

void*
page_sbrk(memoryManager* page, int incr){
    char *old_brk = page->mem_brk;
    
    if((incr < 0 ) || ((page->mem_brk + incr) > page->mem_max_addr)){
        printf("@%s, %d Error: Not enough page size to provide!\n", __func__, __LINE__);
        return (void*) -1;
    }
    
    page->mem_brk += incr;
    return (void*) old_brk;
}

/*
 * find an void page
 */
int
findVoidPage(){
    int i;
    for(i = 0; i < MAX_PAGE; i++){
        if(pages[i]->page_available == '0'){
            return i;
        }
    }
    perror("Error: cannot find available page!\n");
    return -1;
}


/*
 * mm_malloc - Allocate a block with at least size bytes of payload
 */
void *
page_malloc(memoryManager* page, size_t size){
    size_t asize;      /* Adjusted block size */
    size_t extendsize; /* Amount to extend heap if no fit */
    char *bp;
    
    if (page->heap_listp == 0){
        page_init(page);
    }
    /* Ignore spurious requests */
    if (size <= 0)
        return NULL;
    
    /* Decline if requests for more than page size */
    if (size > PAGE_SIZE)
        return NULL;
    /* Adjust block size to include overhead and alignment reqs. */
    if (size <= DSIZE)
        asize = 2*DSIZE;
    else
        asize = DSIZE * ((size + (DSIZE) + (DSIZE-1)) / DSIZE); // align SIZE
    
    /* Search the free list for a fit */
    if ((bp = find_fit(page, asize)) != NULL) {
        place(bp, asize);
        return bp;
    }
    
    /* No fit found. Get more memory and place the block */
    if ((bp = extend_heap(page, asize/WSIZE)) == NULL)
        return NULL;
    place(bp, asize);
    return bp;
}

/*
 *  wrap page allocate function for the thread interface
 */
void*
myallocate(size_t size, char* fileName, int lineNo, int flag){
    pid_t runningThread = getRunningThread();
    printf("thread %d requests size of %zu\n", runningThread, size);
    return page_malloc(pages[runningThread], size);
}

/*
 * mm_free - Free a block
 */
void
page_free(memoryManager* page, void *bp){
    if(bp == 0)
        return;
    
    size_t size = GET_SIZE(HDRP(bp));
    
    if ( page->heap_listp == 0){
        page_init(page);
    }
    
    PUT(HDRP(bp), PACK(size, 0));
    PUT(FTRP(bp), PACK(size, 0));
    coalesce(bp);
}

/*
 *  wrap page deallocate function for the thread interface
 */
void
mydeallocate(void *ptr, char* fileName, int lineNo, int flag){
    pid_t runningThread = getRunningThread();
    return page_free(pages[runningThread], ptr);
}

/*
 * page_release- release page resources to other threads
 */
void page_release(int pageNum){
    pages[pageNum]->page_available = '0';
}

/*
 * Extend heap with free block and return its block pointer
 * Note 8MB memory is the whole memory size, heap is able to
 * gradually extends to a larger size
 */

static void *extend_heap(memoryManager* page, size_t words)
{
    char *bp;
    size_t size;
    
    /* Allocate an even number of words to maintain alignment */
    size = (words % 2) ? (words+1) * WSIZE : words * WSIZE;
    if ((long)(bp = page_sbrk(page, size)) == -1)
        return NULL;

    /* Initialize free block header/footer and the epilogue header */
    PUT(HDRP(bp), PACK(size, 0));         /* Free block header */
    PUT(FTRP(bp), PACK(size, 0));         /* Free block footer */
    PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1)); /* New epilogue header */
    
    /* Coalesce if the previous block was free */
    return coalesce(bp);
}

/*
 * coalesce - Boundary tag coalescing. Return ptr to coalesced block
 */
static void *coalesce(void *bp)
{
    size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));
    size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
    size_t size = GET_SIZE(HDRP(bp));
    
    if (prev_alloc && next_alloc) {            /* Case 1 */
        return bp;
    }
    
    else if (prev_alloc && !next_alloc) {      /* Case 2 */
        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
        PUT(HDRP(bp), PACK(size, 0));
        PUT(FTRP(bp), PACK(size,0));
    }
    
    else if (!prev_alloc && next_alloc) {      /* Case 3 */
        size += GET_SIZE(HDRP(PREV_BLKP(bp)));
        PUT(FTRP(bp), PACK(size, 0));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
        bp = PREV_BLKP(bp);
    }
    
    else {                                     /* Case 4 */
        size += GET_SIZE(HDRP(PREV_BLKP(bp))) +
        GET_SIZE(FTRP(NEXT_BLKP(bp)));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));
        bp = PREV_BLKP(bp);
    }
    
    return bp;
}


/*
 * Place block of asize bytes at start of free block bp
 * and split if remainder would be at least minimum block size
 */
static void place(void *bp, size_t asize)
{
    size_t csize = GET_SIZE(HDRP(bp));
    
    if ((csize - asize) >= (2*DSIZE)) {
        PUT(HDRP(bp), PACK(asize, 1));
        PUT(FTRP(bp), PACK(asize, 1));
        bp = NEXT_BLKP(bp);
        PUT(HDRP(bp), PACK(csize-asize, 0));
        PUT(FTRP(bp), PACK(csize-asize, 0));
    }
    else {
        PUT(HDRP(bp), PACK(csize, 1));
        PUT(FTRP(bp), PACK(csize, 1));
    }
}

/*
 * find_fit - Find a fit for a block with asize bytes
 */

static void *find_fit(memoryManager* page, size_t asize)
{
    
    /* First fit search */
    void *bp;
    
    for (bp = page->heap_listp; GET_SIZE(HDRP(bp)) > 0; bp = NEXT_BLKP(bp)) {
        if (!GET_ALLOC(HDRP(bp)) && (asize <= GET_SIZE(HDRP(bp)))) {
            return bp;
        }
    }
    return NULL; /* No fit */
    
}

static void printblock(void *bp)
{
    size_t hsize, halloc, fsize, falloc;
    
    hsize = GET_SIZE(HDRP(bp));
    halloc = GET_ALLOC(HDRP(bp));
    fsize = GET_SIZE(FTRP(bp));
    falloc = GET_ALLOC(FTRP(bp));
    
    if (hsize == 0) {
        printf("%p: EOL\n", bp);
        return;
    }
    
    printf("%p: header: [%p:%c] footer: [%p:%c]\n", bp,
           hsize, (halloc ? 'a' : 'f'),
           fsize, (falloc ? 'a' : 'f'));
}

void
mem_printf(void){
    int i;
    for(i = 0; i < MAX_PAGE; i++){
        printf(" mem heap %p, brk %p, max %p heaplist%p\n", pages[i]->mem_heap, pages[i]->mem_brk, pages[i]->mem_max_addr, pages[i]->heap_listp);
    }
}

/*
 * 
int
main(){
    mem_init();

    page_malloc(pages[1], 11);
    page_malloc(pages[1], 11);
    page_malloc(pages[1], PAGE_SIZE);

}

 */
